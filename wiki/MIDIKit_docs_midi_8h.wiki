#summary Documentation for the midi.h file

= midi.h =



== Functions ==

int MIDI_STATUS_NOTE_OFF()
  *Note Off event.*
int MIDI_STATUS_NOTE_ON()
  *Note On event.*
int MIDI_STATUS_POLYPHONIC_KEY_PRESSURE()
  *Polyphonic Key Pressure (Aftertouch).*
int MIDI_STATUS_CONTROL_CHANGE()
  *Control Change.*
int MIDI_STATUS_PROGRAM_CHANGE()
  *Program Change.*
int MIDI_STATUS_CHANNEL_PRESSURE()
  *Channel Pressure (After-touch).*
int MIDI_STATUS_PITCH_WHEEL_CHANGE()
  *Pitch Wheel Change.*
int MIDI_STATUS_SYSTEM_EXCLUSIVE()
  *System Exclusive.*
int MIDI_STATUS_TIME_CODE_QUARTER_FRAME()
  *MIDI Time Code Quarter Frame.*
int MIDI_STATUS_SONG_POSITION_POINTER()
  *Song Position Pointer.*
int MIDI_STATUS_SONG_SELECT()
  *Song Select.*
int MIDI_STATUS_UNDEFINED0()
  *Undefined.*
int MIDI_STATUS_UNDEFINED1()
  *Undefined.*
int MIDI_STATUS_TUNE_REQUEST()
  *Tune Request.*
int MIDI_STATUS_END_OF_EXCLUSIVE()
  *End of Exclusive.*
int MIDI_STATUS_TIMING_CLOCK()
  *Timing Clock.*
int MIDI_STATUS_UNDEFINED2()
  *Undefined.*
int MIDI_STATUS_START()
  *Start.*
int MIDI_STATUS_CONTINUE()
  *Continue.*
int MIDI_STATUS_STOP()
  *Stop.*
int MIDI_STATUS_UNDEFINED3()
  *Undefined.*
int MIDI_STATUS_ACTIVE_SENSING()
  *Active Sensing.*
int MIDI_STATUS_RESET()
  *Reset.*
int MIDI_CHANNEL_1()
  **
int MIDI_CHANNEL_2()
  **
int MIDI_CHANNEL_3()
  **
int MIDI_CHANNEL_4()
  **
int MIDI_CHANNEL_5()
  **
int MIDI_CHANNEL_6()
  **
int MIDI_CHANNEL_7()
  **
int MIDI_CHANNEL_8()
  **
int MIDI_CHANNEL_9()
  **
int MIDI_CHANNEL_10()
  **
int MIDI_CHANNEL_11()
  **
int MIDI_CHANNEL_12()
  **
int MIDI_CHANNEL_13()
  **
int MIDI_CHANNEL_14()
  **
int MIDI_CHANNEL_15()
  **
int MIDI_CHANNEL_16()
  **
int MIDI_CHANNEL_BASE()
  **
int MIDI_CHANNEL_ALL()
  **
int MIDI_STATUS()
  **
int MIDI_CHANNEL()
  **
int MIDI_KEY()
  **
int MIDI_VELOCITY()
  **
int MIDI_PRESSURE()
  **
int MIDI_CONTROL()
  **
int MIDI_VALUE()
  **
int MIDI_PROGRAM()
  **
int MIDI_VALUE_LSB()
  **
int MIDI_VALUE_MSB()
  **
int MIDI_MANUFACTURER_ID()
  **
int MIDI_SYSEX_DATA()
  **
int MIDI_SYSEX_SIZE()
  **
int MIDI_SYSEX_FRAGMENT()
  **
int MIDI_TIME_CODE_TYPE()
  **
int MIDI_NOTHING()
  **
int MIDI_NIBBLE_VALUE()
  *Create a status byte with a channel number.*
int MIDI_HIGH_NIBBLE()
  *Access the high nibble of a byte.*
int MIDI_LOW_NIBBLE()
  *Access the low nibble of a byte.*
int MIDI_LONG_VALUE()
  *Compose a MIDILongValue from two MIDIValues.*
int MIDI_LSB()
  *Access the lowest 7 bits of a MIDILongValue.*
int MIDI_MSB()
  *Access the higher 7 bits of a MIDILongValue.*
int MIDI_ON()
  **
int MIDI_OFF()
  **
int MIDI_BOOL()
  **

== Detailed Description ==




== Function Documentation ==

{{{
#int MIDI_STATUS_NOTE_OFF   (
  )
}}}
  Note Off event.
  This message is sent when a note is released (ended).

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_NOTE_ON   (
  )
}}}
  Note On event.
  This message is sent when a note is depressed (start).

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_POLYPHONIC_KEY_PRESSURE   (
  )
}}}
  Polyphonic Key Pressure (Aftertouch).
  This message is most often sent by pressing down on the key after it "bottoms out".

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_CONTROL_CHANGE   (
  )
}}}
  Control Change.
  This message is sent when a controller value changes. Controllers include devices such as pedals and levers.

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_PROGRAM_CHANGE   (
  )
}}}
  Program Change.
  This message sent when the patch number changes.

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_CHANNEL_PRESSURE   (
  )
}}}
  Channel Pressure (After-touch).
  This message is most often sent by pressing down on the key after it "bottoms out". This message is different from polyphonic after-touch. Use this message to send the single greatest pressure value (of all the current depressed keys).

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_PITCH_WHEEL_CHANGE   (
  )
}}}
  Pitch Wheel Change.
  

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_SYSTEM_EXCLUSIVE   (
  )
}}}
  System Exclusive.
  This message makes up for all that MIDI doesn't support.

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_TIME_CODE_QUARTER_FRAME   (
  )
}}}
  MIDI Time Code Quarter Frame.
  (What is this?)

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_SONG_POSITION_POINTER   (
  )
}}}
  Song Position Pointer.
  

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_SONG_SELECT   (
  )
}}}
  Song Select.
  The Song Select specifies which sequence or song is to be played.

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_UNDEFINED0   (
  )
}}}
  Undefined.
  (Reserved)

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_UNDEFINED1   (
  )
}}}
  Undefined.
  (Reserved)

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_TUNE_REQUEST   (
  )
}}}
  Tune Request.
  Upon receiving a Tune Request, all analog synthesizers should tune their oscillators.

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_END_OF_EXCLUSIVE   (
  )
}}}
  End of Exclusive.
  Used to terminate a System Exclusive dump (see above).

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_TIMING_CLOCK   (
  )
}}}
  Timing Clock.
  Sent 24 times per quarter note when synchronization is required.

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_UNDEFINED2   (
  )
}}}
  Undefined.
  (Reserved)

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_START   (
  )
}}}
  Start.
  Start the current sequence playing. (This message will be followed with Timing Clocks).

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_CONTINUE   (
  )
}}}
  Continue.
  Continue at the point the sequence was Stopped.

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_STOP   (
  )
}}}
  Stop.
  Stop the current sequence.

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_UNDEFINED3   (
  )
}}}
  Undefined.
  (Reserved)

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_ACTIVE_SENSING   (
  )
}}}
  Active Sensing.
  Use of this message is optional. When initially sent, the receiver will expect to receive another Active Sensing message each 300ms (max), or it will be assume that the connection has been terminated. At termination, the receiver will turn off all voices and return to normal (non-active sensing) operation.

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS_RESET   (
  )
}}}
  Reset.
  Reset all receivers in the system to power-up status. This should be used sparingly, preferably under manual control. In particular, it should not be sent on power-up.

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_1   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_2   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_3   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_4   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_5   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_6   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_7   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_8   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_9   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_10   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_11   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_12   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_13   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_14   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_15   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_16   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_BASE   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL_ALL   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_STATUS   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CHANNEL   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_KEY   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_VELOCITY   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_PRESSURE   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_CONTROL   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_VALUE   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_PROGRAM   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_VALUE_LSB   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_VALUE_MSB   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_MANUFACTURER_ID   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_SYSEX_DATA   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_SYSEX_SIZE   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_SYSEX_FRAGMENT   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_TIME_CODE_TYPE   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_NOTHING   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_NIBBLE_VALUE   (
  )
}}}
  Create a status byte with a channel number.
  

*Returns*:
  And a return value!

{{{
#int MIDI_HIGH_NIBBLE   (
  )
}}}
  Access the high nibble of a byte.
  

*Returns*:
  And a return value!

{{{
#int MIDI_LOW_NIBBLE   (
  )
}}}
  Access the low nibble of a byte.
  

*Returns*:
  And a return value!

{{{
#int MIDI_LONG_VALUE   (
  )
}}}
  Compose a MIDILongValue from two MIDIValues.
  

*Returns*:
  And a return value!

{{{
#int MIDI_LSB   (
  )
}}}
  Access the lowest 7 bits of a MIDILongValue.
  

*Returns*:
  And a return value!

{{{
#int MIDI_MSB   (
  )
}}}
  Access the higher 7 bits of a MIDILongValue.
  

*Returns*:
  And a return value!

{{{
#int MIDI_ON   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_OFF   (
  )
}}}
  
  

*Returns*:
  And a return value!

{{{
#int MIDI_BOOL   (
  )
}}}
  
  

*Returns*:
  And a return value!

---
|| [MIDIKit_docs Main Page] || [MIDIKit_docs_files Files] ||
