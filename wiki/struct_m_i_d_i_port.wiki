#sidebar contents
#summary Endpoint for message based communication. 
#labels Documentation, Struct

= MIDIPort =
Endpoint for message based communication. 
{{{
#include <port.h>

struct MIDIPort;
}}}

<wiki:toc max_depth="3"/>


--------------------------------------------------------------------------------
== Creation and destruction ==
Creating, destroying and reference counting of [struct_m_i_d_i_driver MIDIDriver] objects. 

--------------------------------------------------------------------------------

=== `struct MIDIPort * MIDIPortCreate` ===
Create a [struct_m_i_d_i_port MIDIPort] instance. 
{{{
struct MIDIPort * MIDIPortCreate(char *name, int mode, void *target, int(*receive)(void *, void *, struct MIDITypeSpec *, void *));
}}}

Allocate space and initialize a [struct_m_i_d_i_port MIDIPort] instance.


==== Parameters ====
|| *Name* || *Description * ||
|| name || The name of the [struct_m_i_d_i_port MIDIPort].  ||
|| mode || The communication mode flags.  ||
|| target || The target for receiving messages.  ||
|| receive || The callback for incoming messages.  ||

==== Return ====
a pointer to the created port structure on success. a `NULL` pointer if the port could not created. 

--------------------------------------------------------------------------------

=== `void MIDIPortDestroy` ===
Destroy a [struct_m_i_d_i_port MIDIPort] instance. 
{{{
void MIDIPortDestroy(struct MIDIPort *port);
}}}

Free all resources occupied by the port and release connected ports.


==== Parameters ====
|| *Name* || *Description * ||
|| port || The port.  ||


--------------------------------------------------------------------------------

=== `void MIDIPortRetain` ===
Retain a [struct_m_i_d_i_port MIDIPort] instance. 
{{{
void MIDIPortRetain(struct MIDIPort *port);
}}}

Increment the reference counter of a port so that it won't be destroyed.


==== Parameters ====
|| *Name* || *Description * ||
|| port || The port.  ||


--------------------------------------------------------------------------------

=== `void MIDIPortRelease` ===
Release a [struct_m_i_d_i_port MIDIPort] instance. 
{{{
void MIDIPortRelease(struct MIDIPort *port);
}}}

Decrement the reference counter of a port. If the reference count reached zero, destroy the port. Before decrementing the reference count check for invalidated connected ports and remove them to break retain cycles.


==== Parameters ====
|| *Name* || *Description * ||
|| port || The port.  ||


--------------------------------------------------------------------------------
== Connection management and message passing ==
Methods to connect ports and pass messages between them. 

--------------------------------------------------------------------------------

=== `static int _port_intercept` ===
Intercept messages. 
{{{
static int _port_intercept(struct MIDIPort *port, int mode, struct MIDITypeSpec *type, void *object);
}}}

Handle every incoming or outgoing message. To cancel the processing of the message a value not equal to 0 can be returned.


==== Parameters ====
|| *Name* || *Description * ||
|| port || The port.  ||
|| mode || The mode of operation that is intercepted.  ||
|| type || The type of the message.  ||
|| object || The message.  ||

==== Return Values ====
|| *Value* || *Description * ||
|| 0 || on success.  ||


--------------------------------------------------------------------------------

=== `static int _port_passthrough` ===
Handle the internal passthrough. 
{{{
static int _port_passthrough(struct MIDIPort *port, struct MIDIPort *source, struct MIDITypeSpec *type, void *object);
}}}

Forward the received message to all connected ports.


==== Parameters ====
|| *Name* || *Description * ||
|| port || The source port for the forwarded messages.  ||
|| source || The source port of the incoming message.  ||
|| type || The type of the message.  ||
|| object || The message.  ||

==== Return Values ====
|| *Value* || *Description * ||
|| 0 || on success.  ||


--------------------------------------------------------------------------------

=== `int MIDIPortConnect` ===
Connect a port to another port. 
{{{
int MIDIPortConnect(struct MIDIPort *port, struct MIDIPort *target);
}}}

Connect a target port to a source port so that the target port will receive messages sent from the source port.


==== Parameters ====
|| *Name* || *Description * ||
|| port || The source port.  ||
|| target || The target port.  ||


--------------------------------------------------------------------------------

=== `int MIDIPortDisconnect` ===
Disconnect a port from another port. 
{{{
int MIDIPortDisconnect(struct MIDIPort *port, struct MIDIPort *target);
}}}

Disconnect a connected port from another port.


==== Parameters ====
|| *Name* || *Description * ||
|| port || The source port.  ||
|| target || The target port.  ||


--------------------------------------------------------------------------------

=== `int MIDIPortDisconnectAll` ===
Disconnect all ports from another port. 
{{{
int MIDIPortDisconnectAll(struct MIDIPort *port);
}}}

Disconnect all connected ports from another port.


==== Parameters ====
|| *Name* || *Description * ||
|| port || The source port.  ||


--------------------------------------------------------------------------------

=== `int MIDIPortInvalidate` ===
Invalidate the port. 
{{{
int MIDIPortInvalidate(struct MIDIPort *port);
}}}

This has to be called by the instance that created the port, when it is being destroyed or no longer available. A port that has been invalidated will never again dereference the `target` pointer that was passed during creation or call the given `receive` function.


==== Parameters ====
|| *Name* || *Description * ||
|| port || The port to invalidate.  ||

==== Return Values ====
|| *Value* || *Description * ||
|| 0 || on success.  ||


--------------------------------------------------------------------------------

=== `int MIDIPortSetObserver` ===
Set the observer of a port. 
{{{
int MIDIPortSetObserver(struct MIDIPort *port, void *target, MIDIPortInterceptFn *intercept);
}}}


==== Parameters ====
|| *Name* || *Description * ||
|| port || The port.  ||
|| target || The target (observer) to be called for each event.  ||
|| intercept || The interceptor function.  ||


--------------------------------------------------------------------------------

=== `int MIDIPortGetObserver` ===
Get the observer of a port. 
{{{
int MIDIPortGetObserver(struct MIDIPort *port, void **target, MIDIPortInterceptFn **intercept);
}}}


==== Parameters ====
|| *Name* || *Description * ||
|| port || The port.  ||
|| target || The target (observer) to be called for each event.  ||
|| intercept || The interceptor function.  ||


--------------------------------------------------------------------------------

=== `int MIDIPortReceiveFrom` ===
Simulate an incoming message that was sent by another port. 
{{{
int MIDIPortReceiveFrom(struct MIDIPort *port, struct MIDIPort *source, struct MIDITypeSpec *type, void *object);
}}}


==== Parameters ====
|| *Name* || *Description * ||
|| port || The target port.  ||
|| source || The source port.  ||
|| type || The message type that was received.  ||
|| object || The message data that was received.  ||

==== Return Values ====
|| *Value* || *Description * ||
|| 0 || on success.  ||


--------------------------------------------------------------------------------

=== `int MIDIPortReceive` ===
Simulate an incoming message. 
{{{
int MIDIPortReceive(struct MIDIPort *port, struct MIDITypeSpec *type, void *object);
}}}

This is called whenever the port receives a new message and can be used to simulate an incoming message.


==== Parameters ====
|| *Name* || *Description * ||
|| port || The target port.  ||
|| type || The message type that was received.  ||
|| object || The message data that was received.  ||

==== Return Values ====
|| *Value* || *Description * ||
|| 0 || on success.  ||


--------------------------------------------------------------------------------

=== `int MIDIPortSendTo` ===
Send a message to another port. 
{{{
int MIDIPortSendTo(struct MIDIPort *port, struct MIDIPort *target, struct MIDITypeSpec *type, void *object);
}}}

Send the given message to any other port. The target port does not have to be connected to the source port.


==== Parameters ====
|| *Name* || *Description * ||
|| port || The source port.  ||
|| target || The target port.  ||
|| type || The message type to send.  ||
|| object || The message data to send.  ||

==== Return Values ====
|| *Value* || *Description * ||
|| 0 || on success.  ||


--------------------------------------------------------------------------------

=== `int MIDIPortSend` ===
Send the given message to all connected ports. 
{{{
int MIDIPortSend(struct MIDIPort *port, struct MIDITypeSpec *type, void *object);
}}}

Use the apply mechanism of the list to send the given message to all connected ports.


==== Parameters ====
|| *Name* || *Description * ||
|| port || The source port.  ||
|| type || The message type to send.  ||
|| object || The message data to send.  ||

==== Return Values ====
|| *Value* || *Description * ||
|| 0 || on success.  ||


--------------------------------------------------------------------------------
== Public Attributes == 
`int`int MIDIPort::refsrefs`int`int MIDIPort::modemode`int`int MIDIPort::validvalid`char *`char* MIDIPort::namename`void *`void* MIDIPort::targettarget`void *`void* MIDIPort::observerobserver`MIDIPortReceiveFn *`MIDIPortReceiveFn* MIDIPort::receivereceive`MIDIPortInterceptFn *`MIDIPortInterceptFn* MIDIPort::interceptintercept`struct [struct_m_i_d_i_list MIDIList] *`struct MIDIList* MIDIPort::portsports

--------------------------------------------------------------------------------
== Private Functions == 


--------------------------------------------------------------------------------

=== `static int _port_apply_send` ===
Applier function to send to a port. 
{{{
static int _port_apply_send(void *item, void *info);
}}}

This is used when a port sends data to all connected ports. If the port to send to was invalidated before, remove it from the list of connected ports. Send the message to the port otherwise.


==== Parameters ====
|| *Name* || *Description * ||
|| item || A pointer to the `[struct_m_i_d_i_port MIDIPort]` to send to.  ||
|| info || A pointer to the `MIDIPortApplyParams` structure that was passed to `MIDIListApply`.  ||

==== Return Values ====
|| *Value* || *Description * ||
|| 0 || on success.  ||


--------------------------------------------------------------------------------

=== `static int _port_apply_check` ===
Applier function to release invalidated ports. 
{{{
static int _port_apply_check(void *item, void *info);
}}}

This is used to break retainment cycles.


==== Parameters ====
|| *Name* || *Description * ||
|| item || A pointer to the `[struct_m_i_d_i_port MIDIPort]` to check.  ||
|| info || A pointer to the `[struct_m_i_d_i_port MIDIPort]` that is connected to the port to check.  ||

==== Return Values ====
|| *Value* || *Description * ||
|| 0 || on success.  ||


--------------------------------------------------------------------------------

=== `static int _port_apply_disconnect` ===
Applier function to disconnect a port from another. 
{{{
static int _port_apply_disconnect(void *item, void *info);
}}}


==== Parameters ====
|| *Name* || *Description * ||
|| item || A pointer to the `[struct_m_i_d_i_port MIDIPort]` to disconnect.  ||
|| info || A pointer to the `[struct_m_i_d_i_port MIDIPort]` from which to disconnect the port.  ||

==== Return Values ====
|| *Value* || *Description * ||
|| 0 || on success.  ||
